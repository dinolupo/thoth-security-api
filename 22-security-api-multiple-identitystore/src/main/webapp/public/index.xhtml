<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition 
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    xmlns:f="http://xmlns.jcp.org/jsf/core"
    template="../WEB-INF/template_index.xhtml">

    <ui:define name="page_references">
        <p>
            app-multiple-store.  (n.d.).  Retrieved from 
            <a href="https://github.com/javaee/security-soteria/tree/master/test/app-multiple-store">
                https://github.com/javaee/security-soteria/tree/master/test/app-multiple-store</a>
        </p>
    </ui:define>
    
    <ui:define name="page_name">
        Index
    </ui:define>

    <ui:define name="test_goals">
        <p>
            Can I create multiple <code>IdentityStore</code> implementations with one 
            implementation responsible for authenticating the user and the other
            implementations responsible for getting the roles for the user? The application uses 
            application-specific roles in <code>@DeclareRoles</code>.  The identity-management groups are 
            mapped to application-specific roles in <code>glassfish-web.xml</code>.
        </p>
    </ui:define>

    <ui:define name="test_results">
        <p>
            <b>Yes!</b>
        </p>
        <p>
            This is actually pretty cool!
        </p>
        <p>
            In this example, I first created <code>TestAuthenticationIdentityStore</code>. This 
            class is responsible for validating the request and returning a 
            <code>CredentialValidationResult</code>. Critical
            things to know about this class are:
        </p>
        <ol class="multiple-identitystore">
            <li>
                <code>@ApplicationScoped</code>                
            </li>
            <li>
                <code>implements IdentityStore</code>
            </li>
            <li>
                This is an important one as it tells EE Security what this <code>IdentityStore</code>
                is responsible for: validating the request.
                <br/><code>@Override<br/>
                public Set&lt;ValidationType&gt; validationTypes() {<br/>
                    return new HashSet&lt;&gt;(asList(VALIDATE));<br/>
                }</code>
            </li>
            <li>
                This validates the request.  You <b>must</b> match this method
                signature exactly - i.e. you must use <code>Credential</code> as
                the parameter type.  Do <b>not</b> use your own concrete implementation type!
                If you do, bad things may happen trying to re-deploy the application.
                <br/><code>@Override<br/>
                public CredentialValidationResult validate(Credential credential) {...}</code>
            </li>
        </ol>
        
        <p>
            Next, I created <code>TestGroupsIdentityStoreA</code>, <code>TestGroupsIdentityStoreB</code> 
            and <code>TestGroupsIdentityStoreC</code>. These are responsible for returning the
            groups/roles for the user.  Each one returns a specific group/role.  Critical
            things to know about these classes are:
        </p>
        <ol class="multiple-identitystore">
            <li>
                <code>@ApplicationScoped</code>
            </li>
            <li>
                <code>implements IdentityStore</code>
            </li>
            <li>
                This is an important one as it tells EE Security what this <code>IdentityStore</code> 
                is responsible for: providing groups.
                <br/><code>@Override<br/>
                public Set&lt;ValidationType&gt; validationTypes() {<br/>
                    return new HashSet&lt;&gt;(asList(PROVIDE_GROUPS));<br/>
                }</code>
            </li>
            <li>
                This provides a <code>Set</code> of groups.  You <b>must</b> match this method
                signature exactly - i.e. you must use <code>CredentialValidationResult</code> as
                the parameter type.  Do <b>not</b> use your own concrete implementation type!
                <br/><code>@Override<br/>
                public Set&lt;String&gt; getCallerGroups(CredentialValidationResult validationResult) {...}</code>
            </li>
        </ol>
        
        <p>
            Each one of the test group identity store implementations returns a different set
            of groups.  EE Security aggregates them all together.            
        </p>
        <p>
            <code>TestGroupsIdentityStoreA</code> <b>returns</b> <code>GROUP_CUSTOMER_SUPPORTS</code>
            <br/>
            <code>TestGroupsIdentityStoreB</code> <b>returns</b> <code>GROUP_EXECUTIVES</code>
            <br/>
            <code>TestGroupsIdentityStoreC</code> <b>returns</b> <code>GROUP_SALARY_EMPLOYEES</code>
        </p>
        <p>
            If you look at the <i>Principal/Role Information</i> section below, you will
            see that your user has all of these roles.
        </p>
    </ui:define>

    

</ui:composition>
