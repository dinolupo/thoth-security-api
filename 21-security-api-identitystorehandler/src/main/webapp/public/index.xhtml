<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition 
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    xmlns:f="http://xmlns.jcp.org/jsf/core"
    template="../WEB-INF/template_index.xhtml">

    <ui:define name="page_references">
        <p>
            app-custom.  (n.d.).  Retrieved from 
            <a href="https://github.com/javaee/security-soteria/tree/master/test/app-custom">
                https://github.com/javaee/security-soteria/tree/master/test/app-custom</a>
        </p>
        <p>
            Java EE Security API Proposed Final Draft.  (2017, July 10).  Retrieved from 
            <a href="https://www.jcp.org/en/jsr/detail?id=375">
                https://www.jcp.org/en/jsr/detail?id=375</a>
        </p>
    </ui:define>
    
    <ui:define name="page_name">Index</ui:define>

    <ui:define name="test_goals">
        <p>
            Can I create my own 
            <code>IdentityStore</code>, <code>Credential</code>, and <code>Principal</code> and have
            <code>IdentityStoreHandler</code> validate the request?
        </p>
    </ui:define>

    <ui:define name="test_results">
        <p>
            <b>Yes!</b>
        </p>
        <p>
            In this example, <code>TestHttpAuthenticationMechanism</code> uses...
        </p>
        <blockquote>
            <p><code>@Inject</code><br/>
                <code>private IdentityStoreHandler identityStoreHandler;</code>
            </p>
        </blockquote>
        <p>
            ...to inject an <code>IdentityStoreHandler</code>.  The 
            <code>IdentityStoreHandler</code> is a Java EE Security API
            class designed to help you get principal and role information.
        </p>
        <p>
            The <code>IdentityStoreHandler</code> will then find and use
            <code>TestCredential</code>, <code>TestIdentityStore</code>, 
            and <code>TestCallerPrincipal</code>.  These are all
            classes that extend the EE Security API and allow this
            project to customize how it will validate the request
            and ultimately build a principal.
        </p>
        <p>
            Below you can see a snipping from the log file (keep reloading
            this page to see the log file update) which shows
            <code>TestHttpAuthenticationMechanism</code> running.  A 
            String representation of the <code>IdentityStoreHandler</code> 
            is printed to show it's being injected.
        </p>
        <blockquote>
            <pre style="font-family:monospace; overflow:scroll; border: 1px solid black;">#{testHttpAuthenticationMechanism.buffer}</pre>
        </blockquote>
        <p>
            Finally, look at the <i>Principal/Role Information</i> section
            below.  You will see the name of the principal was clearly 
            created by a combination of <code>TestCredential</code>
            and <code>TestIdentityStore</code>, and <code>TestCallerPrincipal</code>.
        </p>
    </ui:define>

    

</ui:composition>
